#!/usr/bin/env python

# ## Sidebar creation thingy

import yaml

# Just a little tool to create the jekyll sidebar from a manually created dict.
# Here's the dict defining the structure:

sidebar_d = {
    'Getting started': {
        'Installation': 'https://github.com/fastai/fastai/blob/master/README.md#installation',
        'Troubleshooting': 'https://docs-dev.fast.ai/troubleshoot',
    },
    'Training': {
        'Overview': 'training',
        'basic_train': 'basic_train',
        'train': 'train',
        'metrics': 'metrics',
        'callback': 'callback',
        '': {
            'callbacks': {
                'Overview': 'callbacks',
                'HookCallback': 'callbacks.hooks',
                'MixedPrecision': 'callbacks.fp16',
                'OneCycleScheduler': 'callbacks.one_cycle',
                'LRFinder': 'callbacks.lr_finder',
                'MixUpCallback': 'callbacks.mixup',
                'RNNTrainer': 'callbacks.rnn',
                'GeneralScheduler': 'callbacks.general_sched',
            }
        },
    },
    'Applications': {
        'Overview': 'applications',
        '': {
            'vision': {
                'Overview': 'vision',
                'vision.learner': 'vision.learner',
                'vision.transform': 'vision.transform',
                'vision.image': 'vision.image',
                'vision.data': 'vision.data',
                'vision.model overview': 'vision.models',
                'vision.models.unet': 'vision.models.unet'
            }
        },
        'empty1': {
            'text': {
                'Overview': 'text',
                'text.learner': 'text.learner',
                'text.transform': 'text.transform',
                'text.data': 'text.data',
                'text.models': 'text.models'
            },
        },
        'empty2': {
            'tabular': {
                'Overview': 'tabular',
                'tabular.transform': 'tabular.transform',
                'tabular.data': 'tabular.data',
                'tabular.models': 'tabular.models'
            },
        },
        'collab': 'collab',
    },
    'Core': {
        'Overview': 'overview',
        'basic_data': 'basic_data',
        'layers': 'layers',
        'datasets': 'datasets',
        'core': 'core',
        'torch_core': 'torch_core',
    },
    'Doc authoring': {
        'Overview': 'gen_doc',
        'gen_doc.gen_notebooks': 'gen_doc.gen_notebooks',
        'gen_doc.nbdoc': 'gen_doc.nbdoc',
        'gen_doc.convert2html': 'gen_doc.convert2html',
    },
    'Library development': {
        'Overview': 'https://docs-dev.fast.ai/develop',
        'Testing': 'https://docs-dev.fast.ai/test',
        'Style guide': 'https://docs-dev.fast.ai/style',
        'Abbreviation': 'https://docs-dev.fast.ai/abbr',
        'Typing': 'fastai_typing',
        'Packaging fastai': 'https://docs-dev.fast.ai/release'
    }
}

def _leaf(k,v):
    url = 'external_url' if "/" in v else 'url'
    if url=='url': v=v+'.html'
    return {'title':k, url:v, 'output':'web,pdf'}

_k_names = ['folders', 'folderitems', 'subfolders', 'subfolderitems']
def _side_dict(title, data, level=0):
    k_name = _k_names[level]
    level += 1
    res = [(_side_dict(k, v, level) if isinstance(v,dict) else _leaf(k,v))
        for k,v in data.items()]
    return ({k_name:res} if not title
            else res if title.startswith('empty')
            else {'title': title, 'output':'web', k_name: res})

res = _side_dict('Sidebar', sidebar_d)
res = {'entries': [res]}
res_s = yaml.dump(res, default_flow_style=False)
res_s = res_s.replace('- subfolders:', '  subfolders:').replace(' - - ', '   - ')
res_s = """
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# Instead edit sidebar_d inside docs_src/tools/make_sidebar.ipynb,
# Then execute that notebook from the beginning to the end
# Finally commit the modified notebook and this autogenerated file
#
"""+res_s

open('docs/_data/sidebars/home_sidebar.yml', 'w').write(res_s)
